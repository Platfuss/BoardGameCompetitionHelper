@page "/"

<form action="/" method="post">
    <label for="lengthInput">Number of letters per column/row:</label>
    <input type="number" id="lengthInput" @bind-value="Length" min="3" max="30" />
</form>

<form>
    @for (int i = 0; i < Length; i++)
    {
        @for (int j = 0; j < Length; j++)
        {
            int x = i, y = j;
            <input type="text" maxlength="1" @bind="_letterArray![x][y]" @oninput="(eventArgs) => TextInput(eventArgs, x, y)" />
        }
        <br />
    }

    <br />
    <input type="submit" value="Commit" disabled="@IsDisabled"/>
</form>

<button @onclick="ReadArray">Click ME!</button>

@code
{
    private int _length;
    private List<char[]> _letterArray = new();

    public int Length
    {
        get => _length;
        set
        {
            _length = value;
            _letterArray = new();
            Enumerable.Range(0, _length).ToList().ForEach(i => _letterArray.Add(new char[Length]));
        }
    }

    public bool IsDisabled { get => !_letterArray.All(row => row.All(i => i != default)); }

    protected override Task OnInitializedAsync()
    {
        Length = 3;
        return base.OnInitializedAsync();
    }

    private void ReadArray(MouseEventArgs e)
    {
        if (_letterArray == null)
            return;

        foreach (var item in _letterArray)
            Console.WriteLine(item);
    }

    private void TextInput(ChangeEventArgs e, int i, int j)
    {
        char? value = e?.Value?.ToString()?.ToUpper()?.FirstOrDefault();
        if (value == null || !char.IsLetter(value.Value))
            value = '\0';

        _letterArray![i][j] = value.Value;

        StateHasChanged();
    }
}