@page "/"
@using Main.Data
@inject BoardGameInfoService boardGameService

<form action="/" method="post">
    <label for="lengthInput">Number of letters per column/row:</label>
    <input type="number" id="lengthInput" @bind-value="Length" min="3" max="30" />
</form>

<form>
    @for (int i = 0; i < Length; i++)
    {
        @for (int j = 0; j < Length; j++)
        {
            int x = i, y = j;
            <input type="text" maxlength="1" @bind:get="LetterArray[x][y]" @bind:set="(value) => TextInput(value, x, y)"/>
        }
        <br />
    }

    <br />
    @* <input type="button" value="Commit" disabled="@IsDisabled" /> *@
    <input type="button" value="Commit" disabled="@false" @onclick="SolvePuzzleAsync" />
</form>

<br />
<button @onclick="ReadArray">Click ME!</button>
<br />

@if (_foundItems != null)
{
    
}


@code
{
    private int _length;
    private List<FoundItem>? _foundItems { get; set; }
    public List<char[]> LetterArray { get; set; } = new();

    public int Length
    {
        get => _length;
        set
        {
            _length = value;
            LetterArray = new();
            Enumerable.Range(0, _length).ToList().ForEach(i => LetterArray.Add(new char[Length]));
        }
    }

    public bool IsDisabled { get => !LetterArray.All(row => row.All(i => i != default)); }

    protected override Task OnInitializedAsync()
    {
        Length = 3;
        return base.OnInitializedAsync();
    }

    private void ReadArray()
    {
        if (LetterArray == null)
            return;

        foreach (var item in LetterArray)
            Console.WriteLine(item);
    }

    private void TextInput(char e, int i, int j)
    {
        char value = char.ToUpper(e);
        if (!char.IsLetter(value))
            value = default;

        LetterArray[i][j] = value;
    }

    private async void SolvePuzzleAsync()
    {
        string testString =
            @"I M P E R I U M
            A A A A A A A L
            A A A A A A A E
            A A A A A A A M
            A A A A A A A A
            A A A A A A A A
            A A A A A A A A
            A A A A A A A A";

        List<char[]> letters = testString.Split('\n').Select(row => row.ToCharArray().Where(c => c != ' ' && c != '\r').ToArray()).ToList();
        _foundItems = await boardGameService.SolvePuzzleAsync(letters);
    }
}